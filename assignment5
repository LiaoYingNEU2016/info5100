package assignment5;

abstract class DessertItem{
    protected String name;
    protected int cost;
    DessertItem(String name){
        this.name = name;
    }
    int getCost(){return cost;}

}
package assignment5;

 class Candy extends DessertItem {
     double weight;
     double pricePerPound;

     Candy(String name, double weight, double pricePerPound) {
         super(name);
         this.weight = weight;
         this.pricePerPound = pricePerPound;
     }

     int getCost() {
         return (int)Math.round(weight * pricePerPound);
     }

     public String toString() {
         StringBuilder sb = new StringBuilder();
         String str = weight + " " + "lbs." + " @ " + this.pricePerPound + " " + "/lb." + "\n";
         sb.append(str);
         sb.append(this.name);
         StringBuilder temp = new StringBuilder();
         while (temp.length() < 35 - this.name.length() -
                 DessertShoppe.cents2dollarsAndCentsmethod(getCost()).length()){
         temp.append(" ");}
         sb.append(temp);
         sb.append(DessertShoppe.cents2dollarsAndCentsmethod(getCost()));
         return sb.toString();
     }
     }
     package assignment5;

class Cookies extends DessertItem{
    int number;
    double  pricePerDozen;
    Cookies(String name,int number,double  pricePerDozen){
        super(name);
        this.number = number;
        this.pricePerDozen = pricePerDozen;
    }
    int getCost(){
        return (int)(number * pricePerDozen / 12);
    }
    public String toString() {
        StringBuilder sb = new StringBuilder();
        String str = number + " " + "lbs." + " @ " + this.pricePerDozen + " " + "/lb." + "\n";
        sb.append(str);
        sb.append(this.name);
        StringBuilder temp = new StringBuilder();
        while (temp.length() < 35 - this.name.length() -
                DessertShoppe.cents2dollarsAndCentsmethod(this.getCost()).length()) {
        temp.append(" ");}
        sb.append(temp);
        sb.append(DessertShoppe.cents2dollarsAndCentsmethod(this.getCost()));
        return sb.toString();
    }
}
package assignment5;

class IceCream extends DessertItem{
    IceCream(String name, int cost) { super(name);
    this.cost = cost;}
    int getCost(){
        return cost;}

    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(name);
        StringBuilder temp = new StringBuilder();
        while (temp.length() < 35 - name.length() -
                DessertShoppe.cents2dollarsAndCentsmethod(this.getCost()).length()){
            temp.append(" ");
        }

        sb.append(temp);
        sb.append(DessertShoppe.cents2dollarsAndCentsmethod(this.getCost()));
        return sb.toString();
    }
}
package assignment5;

class Sundaes extends IceCream {
    private String icecreamName;
    int cost;

    public Sundaes(String icecream, int cost, String topping, int costOfTopping) {
        super(icecream, cost);
        this.cost = super.cost + costOfTopping;
        this.name = topping;
        icecreamName = icecream;

    }
    int getCost(){
        return cost;}

    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(this.name + " Sundaes with\n");
        sb.append(icecreamName);
        StringBuilder temp = new StringBuilder();
        while (temp.length() < 35 - icecreamName.length() -
                DessertShoppe.cents2dollarsAndCentsmethod(this.getCost()).length()){
            temp.append(" ");}
        sb.append(temp);
        sb.append(DessertShoppe.cents2dollarsAndCentsmethod(this.getCost()));
        return sb.toString();
    }
}

package assignment5;

public class DessertShoppe {
    String name = "M & M Dessert Shoppe";
    double taxRate = 0.02;
    int maxOfItemName = 30;
    int widthOfReceipt = 38;

    public static String cents2dollarsAndCentsmethod(int cents) {
        double c = (double)cents;
        return String.format("%.2f",c / 100);
    }

    public String toString() {
        StringBuilder res = new StringBuilder();
        res.append("        " + name+ "\n");
        res.append("        --------------------\n");
        res.append("\n");
        return res.toString();
    }
}
     package assignment5;
import java.util.ArrayList;
import java.lang.*;
public class checkOut {
    int numberOfItems = 0;
    int totalCost = 0;
    int totalTax = 0;
    ArrayList<DessertItem>dessertItems;
    checkOut(){
        dessertItems = new ArrayList<>();
    }


    void enterItem(DessertItem item) {
        dessertItems.add(item);
        numberOfItems += 1;
        totalCost += item.getCost();
    }

    void clear() {
        dessertItems.clear();
        numberOfItems = 0;
        totalCost = 0;
    }

    int numberOfItems() {
        return numberOfItems; }

    int totalCost() {
            return totalCost ;
        }

    int totalTax() {
        int totalTax = (int) (totalCost * 6.5 / 100);
        return totalTax;
    }

    @Override
    public String toString() {

        DessertShoppe dessertShoppe = new DessertShoppe();
        StringBuilder res = new StringBuilder();
        res.append(dessertShoppe.toString());
        for(DessertItem item: dessertItems){
        res.append(item + "\n");}
        res.append("\n");
        res.append("Tax");
        StringBuilder str = new StringBuilder();
        while(str.length() < 35 - 3 - 2 - String.valueOf(totalTax()).length()){
            str.append(" ");}
        res.append(str);
        res.append((double)(this.totalTax() )/ 100);
        res.append("\n");
        res.append("Total Cost");
        StringBuilder str1 = new StringBuilder();
        while(str1.length() < 35 - 9 - 2 - String.valueOf(totalCost()).length())
        {str1.append(" ");}
        res.append(str1);
        res.append((double)(this.totalCost())/ 100);

        return res.toString();
    }
}
package assignment5;

class TestCheckOut{
    public static void main(String[] args) {

        checkOut checkout = new checkOut();

        checkout.enterItem(new Candy("Peanut Butter Fudge", 2.25, 399));
        checkout.enterItem(new IceCream("Vanilla Ice Cream", 105));
        checkout.enterItem(new Sundaes("Choc. Chip Ice Cream", 145, "Hot Fudge", 50));
        checkout.enterItem(new Cookies("Oatmeal Raisin Cookies", 4, 399));

        System.out.println("\nNumber of items: " + checkout.numberOfItems() + "\n");
        System.out.println("\nTotal cost: " + checkout.totalCost() + "\n");
        System.out.println("\nTotal tax: " + checkout.totalTax() + "\n");
        System.out.println("\nCost + Tax: " + (checkout.totalCost() + checkout.totalTax()) + "\n");
        System.out.println(checkout);

        checkout.clear();

        checkout.enterItem(new IceCream("Strawberry Ice Cream", 145));
        checkout.enterItem(new Sundaes("Vanilla Ice Cream", 105, "Caramel", 50));
        checkout.enterItem(new Candy("Gummy Worms", 1.33, 89));
        checkout.enterItem(new Cookies("Chocolate Chip Cookies", 4, 399));
        checkout.enterItem(new Candy("Salt Water Taffy", 1.5, 209));
        checkout.enterItem(new Candy("Candy Corn", 3.0, 109));

        System.out.println("\nNumber of items: " + checkout.numberOfItems() + "\n");
        System.out.println("\nTotal cost: " + checkout.totalCost() + "\n");
        System.out.println("\nTotal tax: " + checkout.totalTax() + "\n");
        System.out.println("\nCost + Tax: " + (checkout.totalCost() + checkout.totalTax()) + "\n");
        System.out.println(checkout);
    }
}


